- name: Setup Kubernetes Cluster
  hosts: all
  become: yes
  tasks:
    - name: Update apt
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
          - gnupg
        state: present

    - name: Add Docker GPG key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repo
      apt_repository:
        repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable
        state: present

    - name: Update apt cache after adding Docker repo
      apt:
        update_cache: yes

    - name: Install Docker
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        state: present

    - name: Add ubuntu user to docker group
      user:
        name: ubuntu
        groups: docker
        append: yes

    - name: Create containerd config directory
      file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Configure containerd
      copy:
        content: |
          [plugins."io.containerd.grpc.v1.cri"]
            systemd_cgroup = true
        dest: /etc/containerd/config.toml
        mode: '0644'

    - name: Restart and enable containerd
      systemd:
        name: containerd
        state: restarted
        enabled: yes
        daemon_reload: yes

    - name: Restart and enable docker
      systemd:
        name: docker
        state: restarted
        enabled: yes

    - name: Enable bridge and overlay modules
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - br_netfilter
        - overlay

    - name: Persist kernel modules
      copy:
        content: |
          br_netfilter
          overlay
        dest: /etc/modules-load.d/k8s.conf
        mode: '0644'

    - name: Set sysctl for Kubernetes
      sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: yes
        sysctl_file: /etc/sysctl.d/k8s.conf
      loop:
        - net.bridge.bridge-nf-call-iptables
        - net.bridge.bridge-nf-call-ip6tables
        - net.ipv4.ip_forward

    - name: Add K8s GPG key
      apt_key:
        url: https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key
        state: present

    - name: Add K8s repo
      apt_repository:
        repo: deb https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /
        state: present

    - name: Update apt cache after adding K8s repo
      apt:
        update_cache: yes

    - name: Install K8s components
      apt:
        name:
          - kubelet=1.28.0-1.1
          - kubeadm=1.28.0-1.1
          - kubectl=1.28.0-1.1
        state: present

    - name: Hold K8s versions
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

- name: Setup Kubernetes Master
  hosts: master
  become: yes
  vars:
    public_ip: "3.110.114.163"
    private_ip: "10.0.1.174"
  tasks:
    - name: Check if cluster is already initialized
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeadm_ca

    - name: Initialize K8s cluster
      command: >
        kubeadm init 
        --pod-network-cidr=10.244.0.0/16 
        --apiserver-advertise-address={{ private_ip }} 
        --apiserver-cert-extra-sans={{ public_ip }}
      when: not kubeadm_ca.stat.exists
      register: kubeadm_init

    - name: Create .kube directory for root
      file:
        path: /root/.kube
        state: directory
        mode: '0755'

    # FIX: Added remote_src: yes here
    - name: Copy kubeconfig for root
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /root/.kube/config
        remote_src: yes
        owner: root
        group: root
        mode: '0644'

    - name: Create .kube directory for ubuntu user
      file:
        path: /home/ubuntu/.kube
        state: directory
        owner: ubuntu
        group: ubuntu
        mode: '0755'

    - name: Copy kubeconfig for ubuntu user
      copy:
        src: /etc/kubernetes/admin.conf
        dest: /home/ubuntu/.kube/config
        remote_src: yes
        owner: ubuntu
        group: ubuntu
        mode: '0644'

    - name: Wait for API server to be ready
      command: kubectl get nodes
      environment:
        KUBECONFIG: /root/.kube/config
      register: api_check
      retries: 30
      delay: 10
      until: api_check.rc == 0

    - name: Install Flannel network plugin
      command: kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /root/.kube/config
      when: not kubeadm_ca.stat.exists

    - name: Wait for Flannel pods to be running
      shell: |
        kubectl get pods -n kube-flannel -l app=flannel --no-headers | grep -v Running | wc -l
      environment:
        KUBECONFIG: /root/.kube/config
      register: flannel_status
      retries: 30
      delay: 10
      until: flannel_status.stdout == "0"

    - name: Get join command
      command: kubeadm token create --print-join-command
      register: join_command
      environment:
        KUBECONFIG: /root/.kube/config

- name: Join Kubernetes Workers
  hosts: workers
  become: yes
  tasks:
    - name: Check if node is already joined
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: Join cluster
      command: "{{ hostvars[groups['master'][0]].join_command.stdout }}"
      when: 
        - not kubelet_conf.stat.exists
        - hostvars[groups['master'][0]].join_command is defined